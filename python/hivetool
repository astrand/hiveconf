#!/usr/bin/env python
# -*-Python-*-

import sys
import getopt
import hiveconf

VERSION="0.0"
DEFAULT_TYPE="string"
DEFAULT_ROOT_HIVE="/etc/root.hconf"

def get_type(s):
    """Parse parameter string. Returns (type, parameter)"""
    words = s.split(":", 1)
    if not words[1:]:
        # No colon in string
        return (DEFAULT_TYPE, s)
    
    (beforecolon, aftercolon) = words
    if beforecolon in ("string", "bool", "integer", "float", "binary",
                       "string_list", "bool_list", "integer_list",
                       "float_list", "binary_list"):
        return (beforecolon, aftercolon)
    else:
        return (DEFAULT_TYPE, s)


def get_value(s):
    """Parse parameter string. Returns (parameterpath, value)"""
    words = s.split("=", 1)
    if not words[1:]:
        # No equal sign in string
        return (s, None)
    else:
        return tuple(words)


def handle_param(hive, param):
    """Print parameter. Returns zero on success"""
    (paramtype, param) = get_type(param)
    (parampath, value) = get_value(param)

    if not value:
        # Display value
        method = getattr(hive, "get_%s" % paramtype)
        try:
            value = method(parampath)
        except hiveconf.NotAParameterError:
            print >>sys.stderr, "%s: Not a parameter" % parampath
            return 1
            
        if value == None:
            print >>sys.stderr, "%s: No such parameter" % parampath
            return 1
        else:
            print value
    else:
        # Set value
        method = getattr(hive, "set_%s" % paramtype)
        if not method(parampath, value):
            print >>sys.stderr, "Failed to set parameter", parampath
            return 1
    return 0


def eval_print(hive, varname, param, export):
    (paramtype, parampath) = get_type(param)
    method = getattr(hive, "get_%s" % paramtype)
    value = method(parampath)
    if export:
        print "export",
    if value:
        value = str(value)
        # ' is the only character that needs special handling
        value = value.replace("'", "'\\''")
        print "%s='%s'" % (varname, value)
    else:
        print "%s=''" % varname
    if value == None:
        return 1
    else:
        return 0


def usage():
    print >>sys.stderr, """
hivetool [options] [type:]parameter[=value] ...

  -a,--all-entries        Print all parameters and values in a folder
  -R,--recursive	  When using -a, ascend folders recursively
  -r,--root <file>	  Specify root hive file. Default is /etc/root.hconf
  -e,--eval VAR=parameter Print parameter value in format suitable for
                          assignment to shell variable, via evaluation
  -E folder               As -e, but print all parameters in specified folder
  -v,--version		  Print version
  -x,--export             When using -e,-E, export variables
  -?,--help		  Show this help message

  type is one of: string, bool, integer, float, binary, string_list,
  bool_list, integer_list, float_list, binary_list. Default is string

  Example:

  hivetool -Ra /

  hivetool -r /etc/samba/smb.conf /global/workgroup=MYWORKGROUP
"""



def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "a:Rr:ve:E:x?",
                                   ["all-entries=", "recursive", "root=", "version", "help",
                                    "eval=", "export"])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    roothive = DEFAULT_ROOT_HIVE
    walk_folders = []
    recursive = 0
    e_params =[]
    E_params = []
    eval_export = 0 
    for o, a in opts:
        if o in ("-a", "--all-entries"):
            walk_folders.append(a)
        if o in ("-R", "--recursive"):
            recursive = 1
        if o in ("-r", "--root"):
            roothive = a
        if o in ("-v", "--version"):
            print >> sys.stderr, "hivetool version", VERSION
            sys.exit(0)
        if o in ("-e", "--eval"):
            words = a.split("=", 1)
            if not words[1:]:
                usage()
                sys.exit(2)
            e_params.append(words)
        if o in ("-E",):
            E_params.append(a)
        if o in ("-x", "--export"):
            eval_export = 1
        if o in ("-?", "--help"):
            usage()
            sys.exit(0)

    errors = 0

    # Try to open root hive
    hive = hiveconf.open_hive(roothive)

    # Handle -e parameters
    for (varname, param) in e_params:
        errors += eval_print(hive, varname, param, eval_export)

    # Handle -E
    for foldername in E_params:
        folder = hive.lookup(foldername)
        params = hive.get_parameters(foldername)
        for param in params:
            errors += eval_print(folder, param, param, eval_export)

    # Get/set listed parameters
    for param in args:
        errors += handle_param(hive, param)

    # Walk
    for foldername in walk_folders:
        folder = hive.lookup(foldername)
        if not folder:
            print >>sys.stderr, "%s: Folder not found" % foldername
            continue

        if not isinstance(folder, hiveconf.Folder):
            print >>sys.stderr, "%s: not a folder" % foldername
            continue
        
        folder.walk(recursive)

    sys.exit(errors)

if __name__ == "__main__":
    main()

